<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<title>Gradual typing for effect handlers</title>

		<link rel="stylesheet" href="reveal.js/dist/reset.css">
		<link rel="stylesheet" href="reveal.js/dist/reveal.css">
		<link rel="stylesheet" href="reveal.js/dist/theme/serif.css">

		<!-- Theme used for syntax highlighted code -->
		<link rel="stylesheet" href="reveal.js/plugin/highlight/default.css">
		<link rel="stylesheet" href="Agda.css">
		<link rel="stylesheet" href="style.css">
	</head>
	<body>
    <div hidden>
      \(
        \def\N{\mathbb{N}}
        \def\B{\mathbb{B}}
        \def\nat{\N}
        \def\bool{\B}
        \definecolor{deemph}{RGB}{75,75,75}
        \definecolor{bbb}{RGB}{0,100,255}
        \def\typecolor#1{{\color{Blue}#1}}
        \def\termcolor#1{{\color{deemph}#1}}
        \def\castcolor#1{{\color{RedOrange}#1}}
        \def\importanttypecolor#1{{\color{bbb}#1}}
        \def\precision#1#2{{\color{Blue}#1 \color{Green} \le \color{Blue} #2}}

        \def\lam#1#2{\lambda#1. #2}
        \def\app#1#2{#1\,#2}
        \def\castof#1{\texttt{cast}^{#1}}
        \def\hastype#1#2#3{\typecolor{#1} \vdash \termcolor{#2} : \typecolor{#3}}
      \)
    </div>
		<div class="reveal">
			<div class="slides">
				<section>
          <h2>Gradual typing<br>for effect handlers</h2>
          <div style="text-align:right;">
            <div><b>Li-yao Xia</b></div>
            <div>Philip Wadler</div>
          </div>
          <div class="small left">January 2023 — Huawei Joint Lab</div>
        </section>
  <section>
  <section>
    <h3>Effect handlers</h3>
    <div><b>Modular user-defined effects</b></div>
    <br>
    <div class="flexbox">
      <div class="flex-1 fragment fade-right">
        <div>Eff</div>
        <div><img src="logo-koka.png" class="logo"> Koka</div>
        <div><img src="logo-frank.jpeg" class="logo"> Frank</div>
        <div><img src="logo-links.svg" class="logo"> Links</div>
      </div>
      <div class="flex-1 fragment fade-right">
        <div><img src="logo-react.png" class="logo"> React</div>
        <div><img src="logo-pyro.png" class="logo"> Pyro</div>
        <div><img src="logo-ocaml.svg" class="logo"> OCaml</div>
        <div><img src="logo-wasm.png" class="logo"> Wasm</div>
        <div><img src="logo-haskell.jpeg" class="logo"> Haskell</div>
      </div>
    </div>
  </section>
  <section>
    <h3>Effect handlers</h3>
<div class="fragment">
<div class="left">Performing effects</div>
          <pre><code data-trim data-noescape class="language-ocaml">
effect Yield : int -> unit

let rec fib a b = perform (Yield a); fib b (a + b)
          </code></pre>
</div>
<div class="fragment">
<div class="left">Handling effects</div>
          <pre><code data-trim data-noescape class="language-ocaml">
(* Print every yielded value *)
handle fib 0 1 with
| () -> ()
| effect (Yield a) k -> print a; continue k ()
          </code></pre>
</div>
<!--
          <pre class="fragment"><code data-trim data-noescape class="language-ocaml">
(* Collect the first n yielded values in a list *)
handle fib 0 1 with
| () -> (fun n -> [])
| effect (Yield out) k -> (fun n ->
  if n = 0 then [] else out :: continue k () (n-1))
          </code></pre>
-->
  </section>
  <section>
    <h3>Why effect handlers?</h3>
    <ul>
      <li class="fragment">Handlers:<br><b>multiple interpretations</b> of programs</li>
      <li class="fragment">First-class continuations:<br>powerful primitives for <b>computational effects</b> (state, exceptions, concurrency...)</li>
      <li class="fragment"><b>Composable</b> effects (≠ monads)</li>
      <li class="fragment"><b>Simple</b> semantics: computations as trees</li>
    </ul>
  </section>
  </section>
  <section>
  <section>
    <h3>Typing effects</h3>
    <div class="flexbox medium-plus">
      <div class="flex-1">
<div class="fragment">
<pre><code data-trim data-noescape class="language-ocaml">
3 : int
</code></pre>
</div>
<div class="fragment">
<pre><code data-trim data-noescape class="language-ocaml">
perform (Yield 3) : unit
</code></pre>
</div>
<div class="fragment">
<pre><code data-trim data-noescape class="language-ocaml">
let x = perform Input in
perform (Yield x)
  : unit
</code></pre>
</div>
      </div>
      <div class="flex-1">
<div class="fragment">
<pre><code data-trim data-noescape class="language-ocaml">
3 : &lt;> int
</code></pre>
</div>
<div class="fragment">
<pre><code data-trim data-noescape class="language-ocaml">
perform (Yield 3) : &lt;Yield> unit
</code></pre>
</div>
<div class="fragment">
<pre><code data-trim data-noescape class="language-ocaml">
let x = perform Input in
perform (Yield x)
  : &lt;Input,Yield> unit
</code></pre>
</div>
      </div>
    </div>
    <div class="fragment">
    <br>
    <div class="right medium-plus">Generalizes checked exceptions</div>
<!--
<pre><code data-trim class="medium language-none">
value-type ::= nat
           | value-type -> computation-type
           | ...
computation-type ::= &lt;effects> value-type
</code></pre>
-->
    </div>
  </section>
    <section data-background-image="schism.png">
      <h3 class="flexbox"><span class="flex-1 white right" style="padding-right: 20px">Typing effects</span><span class="flex-1 left">in practice</span></h3>
      <br>
      <div class="flexbox">
        <div class="flex-1 white">
          <div class="fragment fade-right" data-fragment-index="1">
          <div>Eff</div>
          <div><img src="logo-koka.png" class="logo"> Koka</div>
          <div><img src="logo-frank.jpeg" class="logo"> Frank</div>
          <div><img src="logo-links.svg" class="logo"> Links</div>
          </div>
          <br>
          <br>
          <div class="fragment" data-fragment-index="3">Typed effects</div>
        </div>
        <div class="flex-1">
          <div class="fragment fade-right" data-fragment-index="2">
          <div><img src="logo-react.png" class="logo"> React</div>
          <div><img src="logo-pyro.png" class="logo"> Pyro</div>
          <div><img src="logo-ocaml.svg" class="logo"> OCaml</div>
          <div><img src="logo-wasm.png" class="logo"> Wasm</div>
          <div><img src="logo-haskell.jpeg" class="logo"> Haskell</div>
          </div>
          <br>
          <div class="fragment" data-fragment-index="4">Untyped effects</div>
        </div>
      </div>
    </section>
    <section data-background-gradient="conic-gradient(at 50% 35%, #F0F1EB, #61584D)">
      <div class="flexbox">
        <div style="color: white;">Static</div>
        <div class="flex-1"></div>
        <div>Dynamic</div>
      </div>
      <div style="height: 150px;"></div>
      <h3 class="height-half">Gradual types</h3>
      <div style="height: 150px;"></div>
    </section>
  <section>
    <div class="flexbox medium-plus">
      <div class="flex-1">
<div>Framework</div>
<div class="gradual-box"><div class="gradual-label right">Dynamic</div>
<pre><code data-trim data-noescape class="language-ocaml">
(req -> &lt;☆> res) -> &lt;☆> unit
</code></pre>
</div>
<div class="fragment gradual-box" data-fragment-index="1"><div class="gradual-label right">Static</div>
<pre class="border"><code data-trim data-noescape class="language-ocaml">
(req -> &lt;Db,Exc> res) -> &lt;> unit
</code></pre>
</div>
<div class="fragment gradual-box" data-fragment-index="2"><div class="gradual-label right">Dynamic</div>
<pre><code data-trim data-noescape class="language-ocaml">
(req -> &lt;☆> res) -> &lt;☆> unit
</code></pre>
</div>
<div class="fragment gradual-box" data-fragment-index="0"><div class="gradual-label right">Static</div>
<pre class="border"><code data-trim data-noescape class="language-ocaml">
(req -> &lt;Db,Exc> res) -> &lt;> unit
</code></pre>
</div>
              </div>
              <div class="flex-1">
<div>Client</div>
<div class="gradual-box"><div class="gradual-label left">Dynamic</div>
<pre><code data-trim data-noescape class="language-ocaml">
req -> &lt;☆> res
</code></pre>
</div>
<div class="fragment gradual-box" data-fragment-index="1"><div class="gradual-label left">Dynamic</div>
<pre><code data-trim data-noescape class="language-ocaml">
req -> &lt;☆> res
</code></pre>
</div>
<div class="fragment gradual-box" data-fragment-index="2"><div class="gradual-label left">Static</div>
<pre class="border"><code data-trim data-noescape class="language-ocaml">
req -> &lt;Db,Exc> res
</code></pre>
</div>
<div class="fragment gradual-box" data-fragment-index="0"><div class="gradual-label left">Static</div>
<pre class="border"><code data-trim data-noescape class="language-ocaml">
req -> &lt;Db,Exc> res
</code></pre>
</div>
              </div>
            </div>
            <div class="fragment">Well-behaved throughout gradual migration</div>
          </section>
    <section>
      <pre><code data-trim data-noescape class="language-ocaml">
framework : (req -> &lt;Db,Exc> res) -> &lt;> unit
client : req -> &lt;☆> res
      </code></pre>
      <br>
      <div class="fragment">
        <div>Gradually typed program</div>
        <pre><code class="language-ocaml">framework(fun req -> client req) : <> unit</code></pre>
      </div>
      <br>
      <div class="fragment">
        <div>... compiles to run-time casts</div>
        <pre><code class="language-ocaml">framework(fun req -> cast{&lt;☆> -> &lt;Db,Exc>} (client req))</code></pre>
      </div>
    </section>
    <section>
      <h3>Effect casts are handlers</h3>
      <div class="fragment">
      <pre><code data-trim data-noescape class="language-ocaml">
cast{&lt;☆> -> &lt;Db,Exc>} (perform (Db query))
      </code></pre>
      </div>
      <div class="fragment medium-plus">↳ effect forwarded to next handler</div>
      <br>
      <div class="fragment">
      <pre><code data-trim data-noescape class="language-ocaml">
cast{&lt;☆> -> &lt;Db,Exc>} (perform (Yield 42))
      </code></pre>
      </div>
      <div class="fragment">
      <div class="medium-plus">steps to</div>
      <pre><code data-trim data-noescape class="language-ocaml">
blame
      </code></pre>
      </div>
    </section>
  </section>
  <section>
    <section>
      <h3>Gradual guarantee</h3>
      <div class="fragment medium-plus">
        Intuitively, adding or removing type annotations should not change the semantics
        of a program significantly.
      </div>
    </section>
    <section>
      <h3>Gradual guarantee (part 1)</h3>
      <div class="medium">If \(M\) steps to \(V\), any <b>less precise</b> \(M'\) steps to a <b>less precise</b> \(V'\).</div>
      <div class="fragment">
        <img class="col-2" src="graduality-1-tex.svg" width="400px" height="300px"
             style="margin-bottom: -70px;"/>
      </div>
      <div class="fragment">
        <div>Example</div>
      <pre><code data-trim data-noescape class="language-ocaml">
client  : req -> &lt;Db,Exc> res
client' : req -> &lt;☆> res
      </code></pre>
      <pre><code data-trim data-noescape class="language-ocaml">
client ≤ client'
      </code></pre>
      </div>
    </section>
    <section>
      <h3>Gradual guarantee (part 2)</h3>
      <div class="medium">If \(M\) steps to \(V\),<br> any <b>more precise</b> \(M'\) either steps to a <b>more precise</b> \(V'\), or to <code>blame</code>.</div>
      <div class="fragment">
        <img class="col-2" src="graduality-2-tex.svg" width="400px" height="300px"
             style="margin-bottom: -100px;"/>
      </div>
      <div class="fragment medium">
        Consequence of part 1 <b>if</b> reduction is deterministic.
      </div>
      <div class="fragment medium">
        Proving determinism formally in Agda is... painful.
      </div>
    </section>
    <section>
      <div>Constraints to ensure gradual guarantee</div>
      <ul class="medium">
        <li class="fragment">Type comparisons must not be deep
          ("is <code>f</code> of type <code>int -> int </code>?" = bad question;
           "is <code>f</code> a function?" = OK to ask)</li>
        <li class="fragment"><code>blame</code> must not be a catchable exception.</li>
      </ul>
      <br>
      <br>
      <div class="small right"><em>Refined Criteria for Gradual Typing</em>, Siek et al., SNAPL 2015</div>
    </section>
    <section>
      <div>Ongoing work</div>
      <div class="left">
      <ul>
        <li class="fragment medium-plus">Formalization in Agda
          <ul class="medium">
            <li class="fragment">Cast calculus with effects</li>
            <li class="fragment">Gradual guarantee part 1</li>
            <li class="fragment">WIP: formalize compilation from surface gradual type system</li>
            <li class="fragment">WIP: determinism, gradual guarantee part 2</li>
          </ul>
        </li>
      </ul>
      </div>
      <div class="fragment">Future work</div>
      <div class="left">
      <ul class="medium">
        <li class="fragment">Effect polymorphism</li>
        <li class="fragment">Lexically-scoped handlers</li>
      </ul>
      </div>
    </section>
    <section>
      End
    </section>
{#{
    <section>
      <h3>Precision</h3>
      <div>Between types</div>
      <div>
        <pre style="width:50%;"><code data-trim data-noescape class="language-ocaml">
         int ≤ ★
     &lt;Yield> ≤ &lt;☆>
(A -> &lt;E> B) ≤ (★ -> &lt;☆> ★) ≤ ★
        </code></pre>
      <div>
      <br>
      <div>Between terms</div>
      <div class="medium-plus">
        <pre style="width:60%;"><code data-trim data-noescape class="language-ocaml">
(fun (x : int) -> x) ≤ (fun (x : ★) -> x)
        </code></pre>
      </div>
    </section>
}#}
			</div>
		</div>

		<script src="reveal.js/dist/reveal.js"></script>
		<script src="reveal.js/plugin/notes/notes.js"></script>
		<script src="reveal.js/plugin/markdown/markdown.js"></script>
		<script src="reveal.js/plugin/highlight/highlight.js"></script>
    <script src="reveal.js/plugin/math/math.js"></script>
		<script>
			// More info about initialization & config:
			// - https://revealjs.com/initialization/
			// - https://revealjs.com/config/
			Reveal.initialize({
				hash: true,
        slideNumber: 'c',
				// Learn about plugins: https://revealjs.com/plugins/
				plugins: [ RevealMarkdown, RevealHighlight, RevealNotes, RevealMath.MathJax3 ],
        mathjax3: {
          mathjax: 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js',
          tex: {
            inlineMath: [ [ '$', '$' ], [ '\\(', '\\)' ]  ]
          },
          options: {
            skipHtmlTags: [ 'script', 'noscript', 'style', 'textarea', 'pre' ]
          },
        }
			});
		</script>
	</body>
</html>
