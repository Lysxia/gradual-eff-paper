metavar x, y, k ::= {{ com Variables }}
metavar op ::= {{ com Operations }}
metavar kappa {{ tex \kappa }} ::= {{ com Base types }}
indexvar i, j, n ::=

grammar
M, N, L :: 'M_' ::= {{ com Terms }}
| x :: :: Var {{ com Variable }}
| N M :: :: App {{ com Application }}
| fun x . M :: :: Lam {{ com Abstraction }}
| k :: :: Kon {{ com Constant }}
| M + N :: :: Prim {{ com Primitive function }}
| () :: :: Unit {{ com Unit }}
| cast pa M :: :: Cast {{ com Value cast }} {{ tex [[M]] \,\MVAt\, [[pa]] }}
| ecast pe M :: :: ECast {{ com Effect cast }} {{ tex [[M]] \,!\, [[pe]] }}
| M Up G :: :: Box {{ com Box }}
| blame :: :: Blame {{ com Blame }}
| op ( M ) :: :: Operation {{ com Operation }}
| handle H M :: :: Handle {{ com Handler }}
| ( M ) :: M :: Parens
| N [ M / x ] :: M :: Subst
| Ex [ M ] :: M :: ESubst
| H ** op :: M :: HOpClause {{ tex [[H]]_{[[op]]} }}
| H return :: M :: HReturnClause {{ tex [[H]]^{\mathbf{ret} } }}

V :: V_ ::= {{ com Values }}
| fun x . M :: :: Lam {{ com Abstraction }}
| k :: :: Kon {{ com Constant }}
| V Up G :: :: Box {{ com Box }}

H :: 'H_' ::= {{ com Handlers }}
| return x . M ; opclause1 .. opclausen :: :: Handler

opclause :: 'opclause_' ::=
| op x k . M :: :: OpClause

P, Q :: 'P_' ::= {{ com Computation type }}
| A ! E :: :: Dirt % {{ tex [[A]]\;!\;[[E]] }}

A, B, C :: 'A_' ::= {{ com Value type }}
| star :: :: Any {{ com Dynamic type }}
| A -> P :: :: Arr {{ com Function type }}
| kappa :: :: Kon {{ com Base type }}
| unit :: :: Unit {{ com Unit type }}
| ( A ) :: S:: Parens
| G :: M :: Ground

G :: 'G_' ::= {{ com Ground type }}
| star -> star ! wstar :: :: Arr
| kappa :: :: Kappa
| unit :: :: Unit

E, F :: 'E_' ::= {{ com Effect }}
| wstar :: :: Any {{ com Dynamic effect }}
| ops :: :: Ops {{ com Static effect }} {{ tex \foriset{i}{n}{op_i} }}
| opi .. opj :: S:: Ops2

pp {{ tex {\pm p} }} :: 'pp_' ::= {{ com Polarized computation cast }}
| + p :: :: Plus
| - p :: :: Minus
| +- p :: X:: PM
| -+ p :: X:: MP

pa {{ tex {\pm a} }} :: 'pa_' ::= {{ com Polarized value cast }}
| + a :: :: Plus
| - a :: :: Minus
| +- a :: X:: PM {{ tex {\pm [[a]]} }}
| -+ a :: X:: MP {{ tex {\mp [[a]]} }}

pe {{ tex {\pm e} }} :: 'pe_' ::= {{ com Polarized effect cast }}
| + e :: :: Plus
| - e :: :: Minus
| +- e :: X:: PM
| -+ e :: X:: MP

p, q, r :: 'p_' ::= {{ com Computation cast }}
| a ! e :: :: Dirt
| ( p ) :: X:: Parens

a, b, c :: 'a_' ::= {{ com Value cast }}
| id :: :: Id
| a -> p :: :: Arr
| a Up G :: :: Box
| ( a ) :: X:: Parens
| dom ( a ) :: X:: Dom {{ tex \mathbf{dom}([[a]]) }}
| cod ( a ) :: X:: Cod {{ tex \mathbf{cod}([[a]]) }}

e, f :: 'e_' ::= {{ com Effect cast }}
| id :: :: Id
| Up E :: :: Up {{ com Downcast ($[[E]] = \foriset{i}{n}{op_i}$) }}
| eff ( a ) :: X:: Eff {{ tex \mathbf{eff}([[a]]) }}

Gamma {{ tex \Gamma }} :: 'G_' ::= {{ com Typing contexts }}
| empty :: :: Empty
| Gamma , x : A :: :: Cons

Ex {{ tex \mathcal{E} }} :: E_ ::= {{ com Evaluation contexts }}
| square :: :: ExEmpty
| Ex M :: :: ExAppL
| V Ex :: :: ExAppR
| Ex + M :: :: ExPrimL
| V + Ex :: :: ExPrimR
| cast pa Ex :: :: ExCast
| ecast pe Ex :: :: ExECast
| Ex Up G :: :: ExBox
| op ( Ex ) :: :: ExOperation
| handle H Ex :: :: ExHandle
| ( Ex ) :: M:: ExParens

gamma {{ tex \gamma }} :: g_ ::= {{ com Precision contexts }}
| empty :: :: Empty
| gamma , x : a :: :: Cons

terminals :: 'terminals_' ::=
| fun :: :: lambda {{ tex \lambda }}
| nil :: :: nil {{ tex \cdot }}
| -> :: :: Arrow {{ tex \rightarrow }}
| --> :: :: LongArrow {{ tex \longrightarrow }}
| => :: :: Bigarrow {{ tex \Rightarrow }}
| ==> :: :: Biglongarrow {{ tex \Longrightarrow }}
| ~> :: :: Sqgarrow {{ tex \leadsto }}
| |- :: :: Turnstile {{ tex \vdash }}
| |-? :: :: Turnstileq {{ tex \vdash_{?} }}
| |-! :: :: Turnstilpe {{ tex \vdash_{!} }}
| |-?! :: :: Turnstilex {{ tex \vdash_{?!} }}
| in :: :: In {{ tex \in }}
| in? :: :: Inq {{ tex \in_{?} }}
| subset :: :: Subset {{ tex \subseteq }}
| subset? :: :: Subsetq {{ tex \subseteq_{?} }}
| Up :: :: Up {{ tex \Uparrow }}
| wstar :: :: WStar {{ tex \mbox{\tiny\FiveStarOpen} }}
| star :: :: Star {{ tex \star }}
| <= :: :: LessThan {{ tex \le }}
| +- :: :: PlusMinus {{ tex \pm }}
| -+ :: :: MinusPlus {{ tex \mp }}
| square :: :: Square {{ tex \square }}

formula :: formula_ ::=
| judgement :: :: judgement
| ( formula ) :: M :: brackets
| formula AND formula' :: M :: space {{ tex [[formula]] \quad\quad [[formula']] }}
| x /= y :: :: VarNEq {{ tex [[x]] \neq [[y]] }}
| G /= G' :: :: GNEq {{ tex [[G]] \neq [[G']] }}
| k \in denote kappa :: :: kon_typing {{ tex [[k]] \in \llbracket [[kappa]] \rrbracket }}
| primtype kappa kappa' kappa'' :: :: primitive_typing {{ tex \mathbf{typeof}(+) = ([[kappa]] \to [[kappa']] \to [[kappa'']]) }}
| sig op A B :: :: SigOp {{ tex \mathbf{sig}([[op]]) = [[A]] \to [[B]] }}
| k'' is denote k + k' :: :: DenOp {{ tex [[k'']] = \llbracket [[k]] + [[k']] \rrbracket }}
| op is not bound Ex :: :: Unbound_Ex {{ tex [[op]] \not\in \mathbf{bound}([[Ex]]) }}
| op is bound pe :: :: Bound_pe {{ tex [[op]] \in \mathbf{bound}([[pe]]) }}
| op is bound H :: :: Bound_H {{ tex [[op]] \in \mathbf{bound}([[H]]) }}
| commutesl pp q r :: :: CommuteL {{ tex \mathbf{commutes}^L([[pp]], [[q]], [[r]]) }}
| commutesr p pp r :: :: CommuteR {{ tex \mathbf{commutes}^R([[p]], [[pp]], [[r]]) }}
| commutesl pa b c :: :: CommuteLa {{ tex \mathbf{commutes}^L([[pa]], [[b]], [[c]]) }}
| commutesr a pa c :: :: CommuteRa {{ tex \mathbf{commutes}^R([[a]], [[pa]], [[c]]) }}
| formula implies formula' :: :: Implies {{ tex [[formula]] \implies [[formula']] }}
| formula vee formula' :: :: Vee {{ tex [[formula]] \vee [[formula']] }}

subrules
  V <:: M
% Nope
%   G <:: A

defns
Jtype :: '' ::=

defn
Gamma |- x : A :: ::varhastype:: '' {{ com in context $[[Gamma]]$, $[[x]]$ has type $[[A]]$ }} by

  ----- :: var_here
  Gamma , x : A |- x : A

  x /= y
  ----- :: var_there
  Gamma , y : B |- x : A
  
defn
Gamma |- M : P :: ::hastype:: '' {{ com in context $[[Gamma]]$, $[[M]]$ has type $[[P]]$ }} by

  Gamma |- x : A
  ----- :: type_var
  Gamma |- x : A ! E

  Gamma |- N : (A -> B ! E) ! E
  Gamma |- M : A ! E
  ----- :: type_app
  Gamma |- N M : B ! E

  Gamma , x : A |- M : B ! E
  ----- :: type_abs
  Gamma |- fun x . M : (A -> B ! E) ! F

  k \in denote kappa
  ----- :: type_kon
  Gamma |- k : kappa ! E

  primtype kappa kappa' kappa''
  Gamma |- M : kappa ! E
  Gamma |- N : kappa' ! E
  ----- :: type_prim
  Gamma |- M + N : kappa'' ! E

  ----- :: type_unit
  Gamma |- () : unit ! E

  Gamma |- M : A ! E
  pa : A => B
  ----- :: type_cast
  Gamma |- cast pa M : B ! E

  Gamma |- M : A ! E
  pe : E => F
  ----- :: type_ecast
  Gamma |- ecast pe M : A ! F

  Gamma |- M : G ! E
  ----- :: type_box
  Gamma |- M Up G : star ! E

  ----- :: type_blame
  Gamma |- blame : P

  sig op A B
  op in E
  Gamma |- M : A ! E
  ----- :: type_op
  Gamma |- op ( M ) : B ! E

  Gamma |- H : P ==> Q
  Gamma |- M : P
  ----- :: type_handle
  Gamma |- handle H M : Q

defn
Gamma |- H : P ==> Q :: ::hashtype:: '' {{ com in context $[[Gamma]]$, $[[H]]$ has type $[[P]] \Longrightarrow [[Q]]$ }} by

  Gamma , x : A |- M : B ! F
  sig opi Ai Bi
  Gamma , x : Ai , k : Bi -> B ! F |- Mi : B ! F
  F = ops + E
  ----- :: type_handler
  Gamma |- return x . M ; op1 x k . M1 .. opn x k . Mn : A ! E ==> B ! F

defn
  F = ops + E :: ::effadd:: '' {{ com effect addition }} by

  ----- :: effadd_any
  wstar = ops + wstar

  {{ TODO }}
  ----- :: effadd_concat
  F = ops + E

defn
pp : P => Q :: ::pphastype:: '' {{ com $[[pp]]$ has type $[[P]] [[=>]] [[Q]]$ }} by

  p : P <= Q
  ----- :: ptype_plus
  + p : P => Q

  p : Q <= P
  ----- :: ptype_minus
  - p : P => Q

defn
pa : A => B :: ::pahastype:: '' {{ com $[[pa]]$ has type $[[A]] [[=>]] [[B]]$ }} by

  a : A <= B
  ----- :: atype_plus
  + a : A => B

  a : B <= A
  ----- :: atype_minus
  - a : A => B

defn
pe : E => F :: ::pehastype:: '' {{ com $[[pe]]$ has type $[[E]] [[=>]] [[F]]$ }} by

  e : E <= F
  ----- :: etype_plus
  + e : E => F

  e : F <= E
  ----- :: etype_minus
  - e : E => F

defn
p : P <= P' :: ::phastype:: '' {{ com $[[p]]$ is evidence that $[[P]]$ is more precise than $[[P']]$ }} by

  a : A <= A'
  e : E <= E'
  ----- :: ptype_dirt
  a ! e : A ! E <= A' ! E'

defn
a : A <= A' :: ::ahastype:: '' {{ com $[[a]]$ is evidence that $[[A]]$ is more precise than $[[A']]$ }} by

  ----- :: atype_id
  id : A <= A

  a : A <= A'
  p : P <= P'
  ----- :: atype_arr
  a -> p : A -> P <= A' -> P'

  a : A <= G
  ----- :: atype_box
  a Up G : A <= star

defn
e : E <= E' :: ::ehastype:: '' {{ com $[[e]]$ is evidence that $[[E]]$ is more precise than $[[E']]$ }} by

  ----- :: etype_id
  id : E <= E

  ----- :: etype_up
  Up E : E <= wstar

defn
op in E :: ::opin:: '' {{ com operation $[[op]]$ is a member of effect $[[E]]$ }} by

  ----- :: op_in_star
  op in wstar

  ----- :: op_in_ops
  opi in ops

defns
Jred :: '' ::=

defn
M --> N :: ::red:: '' by

  ----- :: beta
  (fun x . N) V --> N [ V / x ]

  k'' is denote k + k'
  ----- :: delta
  k + k' --> k''

  ----- :: cast_id
  cast +- id V --> V

  ----- :: cast_wrap
  cast +- ( a -> b ! e ) (fun x . M) --> fun x . ecast +- e (cast +- b ( M ( cast -+ a x ) ))

  ----- :: cast_expand
  cast + (a Up G) V --> ( cast + a V ) Up G

  ----- :: cast_collapse
  cast - (a Up G) (V Up G) --> cast - a V

  G /= G'
  ----- :: cast_collide
  cast - (a Up G) (V Up G') --> blame

  op is not bound Ex
  op is bound +- e
  ----- :: cast_op_blame
  cast +- a (Ex [ op ( V ) ]) --> blame

  op is not bound Ex
  op is bound H
  ----- :: handle_op
  handle H Ex [ op ( V ) ] --> H ** op [ V / x ] [ (fun y . handle H Ex [ y ]) / k ]

  ----- :: handle_return
  handle H V --> H return [ V / x ]

defn
gamma |- M <= M' : p :: ::prec:: '' {{ com $[[M]]$ is more precise than $[[M']]$ with type-precision $[[p]]$ }} by

  gamma |- x : a
  ----- :: prec_var
  gamma |- x <= x : a ! e

  gamma |- N <= N' : a ! eff ( a )
  gamma |- M <= M' : dom ( a ) ! eff ( a )
  ----- :: prec_app
  gamma |- N M <= N M' : cod ( a ) ! eff ( a )

  gamma , x : dom ( a ) |- M <= M' : cod ( a ) ! eff ( a )
  ----- :: prec_abs
  gamma |- fun x . M <= fun x . M' : a ! e

  ----- :: prec_kon
  gamma |- k <= k : id ! e

  gamma |- M <= M' : id ! e
  gamma |- N <= N' : id ! e
  ----- :: prec_prim
  gamma |- M + N <= M' + N' : id ! e

  gamma |- M <= M' : a ! e
  commutesl +- b a b'
  ----- :: prec_cast_left
  gamma |- (cast +- b M) <= M' : b' ! e

  gamma |- M <= M' : a ! e
  commutesr a +- b' b
  ----- :: prec_cast_right
  gamma |- M <= (cast +- b' M') : b ! e

  gamma |- M <= M' : id ! e
  ----- :: prec_box
  gamma |- (M Up G) <= (M' Up G) : id ! e

  gamma |- M <= M' : a ! e
  ----- :: prec_box_right
  gamma |- M <= (M' Up G) : (a Up G) ! e

  ----- :: prec_blame
  gamma |- blame <= M : p

  % TODO: There's a generalization here in the Agda code
  gamma |- fun x . M <= fun x . M' : c ! e
  commutesl +- a -> p b c
  ----- :: prec_wrap_left
  gamma |- (fun x . ecast +- e cast +- b ( M ( cast -+ a x ) )) <= fun x . M' : b ! e

  gamma |- fun x . M <= fun x . M' : c ! e
  commutesr c +- (a -> b ! e) c'
  ----- :: prec_wrap_right
  gamma |- fun x . M <= (fun x . ecast +- e cast +- b ( M' ( cast -+ a x ) )) : c' ! e

  gamma |- M <= M' : id ! e
  ----- :: prec_op
  gamma |- op ( M ) <= op ( M' ) : id ! e

  gamma |- M <= M' : p
  gamma |- H <= H' : p ==> q
  ----- :: prec_handle
  gamma |- handle H M <= handle H' M' : q

defn
gamma |- H <= H' : p ==> q :: ::hprec:: '' by

  gamma , x : a |- M <= M' : b ! f
  gamma , x : id , k : id -> b ! f |- Mi <= Mi' : b ! f
  ----- :: prec_handler
  gamma |- return x . M ; op1 x k . M1 .. opn x k . Mn <= return x . M' ; op1 x k . M1' .. opn x k . Mn' : a ! e ==> b ! f

defn
gamma |- x : a :: ::varprec:: '' by
